# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: 2017-2019, Sven Eckelmann <sven@narfation.org>

sudo: required
dist: xenial
language: cpp
arch:
  - amd64
  - ppc64le
compiler:
  - gcc
  - clang
addons:
  apt:
    packages:
    - libpcap-dev
    - binutils
    - libc-bin
env:
  matrix:
   - CPPFLAGS=""
   - CPPFLAGS="-DDEBUG"
   - CPPFLAGS="-DCLEAR_SCREEN"
   - CPPFLAGS="-DCLEAR_SCREEN -DDEBUG"
before_script:
- dd if=/dev/urandom of=test.img count=10000 bs=1024
script:
 - make clean V=s && make CC="${CC}" V=s
 - make clean V=s && make CC="${CC}" EMBED_CI="test.img" V=s

matrix:
  include:
    # windows cross-compiler (MXE-only)
    - os: linux
      env:
      - MXE_CPU=i686
      - PATH="/usr/lib/mxe/usr/bin/:$PATH"
      addons:
        apt:
          sources:
          - sourceline: 'deb http://pkg.mxe.cc/repos/apt/ xenial main'
            key_url: 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC6BF758A33A3A276'
          packages:
          - mxe-i686-w64-mingw32.static-gcc
          - mxe-i686-w64-mingw32.static-winpcap
      before_script:
      - dd if=/dev/urandom of=test.img count=10000 bs=1024
      script:
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN -DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" EMBED_CI="test.img" ap51-flash.exe
      - make clean V=s && CFLAGS="-flto -O2" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe && mv ap51-flash.exe ap51-flash-i686-static.exe
    # windows cross-compiler (WinPCAP)
    - os: linux
      env:
      - MXE_CPU=i686
      - PATH="/usr/lib/mxe/usr/bin/:$PATH"
      - WINPCAP_LDLIBS="-LWpdPack/Lib/ -lwpcap"
      - WINPCAP_CFLAGS="-IWpdPack/Include/"
      addons:
        apt:
          sources:
          - sourceline: 'deb http://pkg.mxe.cc/repos/apt/ xenial main'
            key_url: 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC6BF758A33A3A276'
          packages:
          - curl
          - unzip
          - mxe-i686-w64-mingw32.static-gcc
          - mxe-i686-w64-mingw32.static-pkgconf
      before_script:
      - curl https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip -o WpdPack_4_1_2.zip
      - unzip WpdPack_4_1_2.zip
      - rm -f WpdPack_4_1_2.zip
      - dd if=/dev/urandom of=test.img count=10000 bs=1024
      script:
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN -DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" EMBED_CI="test.img" ap51-flash.exe
      - make clean V=s && CFLAGS="-flto -O2" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe && mv ap51-flash.exe ap51-flash-i686-winpcap.exe
    # windows cross-compiler (Npcap WinPcap mode)
    - os: linux
      env:
      - MXE_CPU=i686
      - PATH="/usr/lib/mxe/usr/bin/:$PATH"
      - WINPCAP_LDLIBS="-Lnpcap-sdk/Lib/ -lwpcap"
      - WINPCAP_CFLAGS="-Inpcap-sdk/Include/"
      addons:
        apt:
          sources:
          - sourceline: 'deb http://pkg.mxe.cc/repos/apt/ xenial main'
            key_url: 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC6BF758A33A3A276'
          packages:
          - curl
          - unzip
          - mxe-i686-w64-mingw32.static-gcc
          - mxe-i686-w64-mingw32.static-pkgconf
      before_script:
      - curl https://nmap.org/npcap/dist/npcap-sdk-1.04.zip -o npcap-sdk-1.04.zip
      - unzip npcap-sdk-1.04.zip -d npcap-sdk
      - rm -f npcap-sdk-1.04.zip
      - dd if=/dev/urandom of=test.img count=10000 bs=1024
      script:
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN -DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" EMBED_CI="test.img" ap51-flash.exe
      - make clean V=s && CFLAGS="-flto -O2" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe && mv ap51-flash.exe ap51-flash-i686-winpcap.exe
    # windows cross-compiler (Npcap modern mode)
    - os: linux
      env:
      - MXE_CPU=i686
      - PATH="/usr/lib/mxe/usr/bin/:$PATH"
      - WINPCAP_LDLIBS="-Lnpcap-sdk/Lib-delayed/ -lwpcap"
      - WINPCAP_CFLAGS="-Inpcap-sdk/Include/ -DNPCAP"
      addons:
        apt:
          sources:
          - sourceline: 'deb http://pkg.mxe.cc/repos/apt/ xenial main'
            key_url: 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC6BF758A33A3A276'
          packages:
          - curl
          - unzip
          - mxe-i686-w64-mingw32.static-gcc
          - mxe-i686-w64-mingw32.static-pkgconf
      before_script:
      - curl https://nmap.org/npcap/dist/npcap-sdk-1.04.zip -o npcap-sdk-1.04.zip
      - unzip npcap-sdk-1.04.zip -d npcap-sdk
      - rm -f npcap-sdk-1.04.zip
      - mkdir -p npcap-sdk/Lib-delayed
      - |
        cat > npcap-sdk/Lib-delayed/wpcap.def <<EOF
        LIBRARY "wpcap.dll"
        EXPORTS
        pcap_close
        pcap_findalldevs
        pcap_freealldevs
        pcap_next
        pcap_open_live
        pcap_sendpacket
        pcap_setmintocopy
        EOF
      - "${MXE_CPU}-w64-mingw32.static-dlltool --output-delaylib npcap-sdk/Lib-delayed/wpcap.lib --def npcap-sdk/Lib-delayed/wpcap.def"
      - dd if=/dev/urandom of=test.img count=10000 bs=1024
      script:
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN -DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DDEBUG" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe
      - make clean V=s && make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" EMBED_CI="test.img" ap51-flash.exe
      - make clean V=s && CFLAGS="-flto -O2" make V=s CROSS="${MXE_CPU}-w64-mingw32.static-" ap51-flash.exe && mv ap51-flash.exe ap51-flash-i686-npcap.exe
    # Debian mingw-w64 windows cross-compiler (Npcap modern mode)
    - os: linux
      env:
      - WINPCAP_LDLIBS="-Lnpcap-sdk/Lib-delayed/ -lwpcap"
      - WINPCAP_CFLAGS="-Inpcap-sdk/Include/ -DNPCAP"
      addons:
        apt:
          packages:
          - curl
          - unzip
          - mingw-w64-tools
          - gcc-mingw-w64
      before_script:
      - curl https://nmap.org/npcap/dist/npcap-sdk-1.04.zip -o npcap-sdk-1.04.zip
      - unzip npcap-sdk-1.04.zip -d npcap-sdk
      - rm -f npcap-sdk-1.04.zip
      - mkdir -p npcap-sdk/Lib-delayed
      - |
        cat > npcap-sdk/Lib-delayed/wpcap.def <<EOF
        LIBRARY "wpcap.dll"
        EXPORTS
        pcap_close
        pcap_findalldevs
        pcap_freealldevs
        pcap_next
        pcap_open_live
        pcap_sendpacket
        pcap_setmintocopy
        EOF
      - "i686-w64-mingw32-dlltool --output-delaylib npcap-sdk/Lib-delayed/wpcap.lib --def npcap-sdk/Lib-delayed/wpcap.def"
      - dd if=/dev/urandom of=test.img count=10000 bs=1024
      script:
      - make clean V=s && make V=s CROSS="i686-w64-mingw32-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN" make V=s CROSS="i686-w64-mingw32-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DCLEAR_SCREEN -DDEBUG" make V=s CROSS="i686-w64-mingw32-" ap51-flash.exe
      - make clean V=s && CPPFLAGS="-DDEBUG" make V=s CROSS="i686-w64-mingw32-" ap51-flash.exe
      - make clean V=s && make V=s CROSS="i686-w64-mingw32-" EMBED_CI="test.img" ap51-flash.exe
      - make clean V=s && CFLAGS="-flto -O2" make V=s CROSS="i686-w64-mingw32-" ap51-flash.exe && mv ap51-flash.exe ap51-flash-i686-npcap.exe
    # musl static cross build
    - os: linux
      env:
      - CPPFLAGS="-Ikernel-headers/x86/include/"
      - CFLAGS="-static -m64 -flto -O2"
      - LDFLAGS="-Wl,-m -Wl,elf_x86_64"
      addons:
        apt:
          packages:
          - git
          - musl-tools
      before_script:
      - git clone https://github.com/sabotage-linux/kernel-headers -b v3.12.6-5 kernel-headers
      script:
      - make clean V=s && make V=s CC=musl-gcc && mv ap51-flash ap51-flash-x86_64-linux
    # osx native build
    - os: osx
      before_script:
      - dd if=/dev/urandom of=test.img count=10000 bs=1024
      script:
      - make clean V=s && make V=s ap51-flash-osx
      - make clean V=s && CPPFLAGS="-DDEBUG" make V=s ap51-flash-osx
      - make clean V=s && make V=s EMBED_CI="test.img" ap51-flash-osx
      - make clean V=s && CFLAGS="-flto -O2" make V=s ap51-flash-osx
    # reuse test
    - os: linux
      language: minimal
      services:
      - docker
      env:
      - REUSE_TEST=1
      before_install:
      - docker pull fsfe/reuse:latest
      - docker run -v ${TRAVIS_BUILD_DIR}:/data fsfe/reuse:latest lint
      script:
      - true
